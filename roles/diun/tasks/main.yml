---
- block:

  - name: ensure diun group exits
    ansible.builtin.group:
      name: diun
      system: true

  - name: ensure diun user exists and has restrictive settings
    ansible.builtin.user:
      name: diun
      groups: diun, docker
      password: "*"
      create_home: false
      system: true
      shell: /usr/sbin/nologin

  - name: ensure that the directory where we deploy diun exists
    ansible.builtin.file:
      path: "{{ diun_dir }}"
      state: directory
      owner: diun
      group: diun
      mode: "0750"

  - name: download locally diun in /tmp
    ansible.builtin.get_url:
      url: "{{ diun_download_url }}"
      dest: /tmp
      checksum: "sha256:{{ diun_tarball_sha256 }}"
    delegate_to: localhost
    become: false

  - name: unarchive locally diun
    ansible.builtin.unarchive:
      src: "/tmp/{{ diun_tarball }}"
      dest: /tmp
      remote_src: true
    delegate_to: localhost
    become: false

  - name: copy diun binary
    ansible.builtin.copy:
      src: /tmp/diun
      dest: "{{ diun_dir }}"
      owner: diun
      group: diun
      mode: "0750"
    notify: systemctl restart diun

  - name: set the diun config file
    ansible.builtin.copy:
      content: "{{ diun_config | mandatory }}"
      dest: "{{ diun_dir }}/diun.yml"
      owner: diun
      group: diun
      mode: 0640
    notify: systemctl restart diun

  - name: install diun systemd unit file
    ansible.builtin.template:
      src: etc/systemd/system/diun.service.j2
      dest: /etc/systemd/system/diun.service
    notify:
      - systemctl daemon-reload

  - name: systemctl enable diun
    ansible.builtin.systemd:
      name: diun
      enabled: true

  - name: ensure diun is running
    ansible.builtin.systemd:
      name: diun
      state: started

  become: "{{ diun_become }}"
  become_user: "{{ diun_become_user }}"
